// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/user/me": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "get user profile data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "access token 'Bearer {token}'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserView"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.HttpErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.HttpErr"
                        }
                    }
                }
            }
        },
        "/user/sign-in": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "login existed user",
                "parameters": [
                    {
                        "description": "Logins existed user and returns access token",
                        "name": "RequestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserAuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.HttpErr"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.HttpErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.HttpErr"
                        }
                    }
                }
            }
        },
        "/users/sign-up": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "register new user",
                "parameters": [
                    {
                        "description": "Registers new user and returns access token",
                        "name": "RequestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserRegister"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.UserAuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.HttpErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.HttpErr"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.HttpErr": {
            "type": "object",
            "required": [
                "description",
                "err"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "verbose error description"
                },
                "err": {
                    "type": "string",
                    "example": "Short error message : 'Not Found' | 'Internal Server Error' | etc"
                }
            }
        },
        "dto.UserAuthResponse": {
            "type": "object",
            "required": [
                "id",
                "token"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.UserLogin": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "yoyoyo@femail.ru"
                },
                "password": {
                    "type": "string",
                    "example": "qwerty234sraiekvaroisehw{}$"
                }
            }
        },
        "dto.UserRegister": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "yoyoyo@femail.ru"
                },
                "name": {
                    "type": "string",
                    "maxLength": 16,
                    "example": "msa"
                },
                "password": {
                    "type": "string",
                    "example": "qwerty123_AOISROKT(:#*L(*))"
                }
            }
        },
        "dto.UserView": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "me@femail.ru"
                },
                "id": {
                    "type": "string",
                    "example": "some-uuid-v4"
                },
                "name": {
                    "type": "string",
                    "example": "vanya228"
                },
                "password": {
                    "type": "string",
                    "example": "SOME_HASHED_PASSWD"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:808",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Golang clean-arch Web Template",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
